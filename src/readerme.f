C> @file
C> @brief Read a BUFR message from a memory array.
C>
C> @authors J. Woollen J. Ator @date 1995-06-28

C> Read a BUFR message from a memory array.      
C>
C> This subroutine is similar to subroutine readmg(), except that it
C> reads a BUFR message from an array passed as input, whereas
C> readmg() reads a BUFR message from a file on the local system.
C>
C> This subroutine can be used in any context in which readmg()
C> might otherwise be used, and from that point on, the application
C> program can proceed with a call to one of the
C> [subset-reading subroutines](@ref hierarchy) (and then,
C> subsequently, to any of the
C> [values-reading subroutines](@ref hierarchy)).
C>
C> When using this subroutine, it's necessary for the
C> application program to have previously called subroutine openbf() in
C> order to associate a DX BUFR tables file with the message that is
C> being input via MESG; it's also necessary to pass in the
C> relevant LUNIT value as a call argument, even though in this case
C> the subroutine will not actually try to read from the associated
C> Fortran logical unit.
C>
C> If MESG contains a DX BUFR table message, the subroutine will
C> store the contents internally and use them to process any
C> future BUFR messages associated with LUNIT. In this case, the
C> subroutine will return with IRET = 11, and any number of
C> DX BUFR table messages passed in via consecutive calls to this
C> subroutine will accumulate internally and be treated as a single DX
C> BUFR table, up until a call is made where MESG no longer contains a
C> DX BUFR table message.
C>
C> @param[in] MESG - integer(*): BUFR message.
C> @param[in] LUNIT - integer: Fortran logical unit number for BUFR file.
C> @param[out] SUBSET - character*8: Table A mnemonic for type of BUFR
C> message that was read (see [DX BUFR Tables](@ref dfbftab)
C> for further information about Table A mnemonics).
C> @param[out] JDATE - integer: Date-time stored within Section 1 of
C> BUFR message that was read, in format of either YYMMDDHH or YYYYMMDDHH,
C> depending on the most recent call to datelen().
C> @param[out] IRET - integer: return code:
C> - 0 MESG was successfully read.
C> - 11 MESG contained a DX BUFR table message.
C> - -1 MESG contained an unrecognized Table A message type.
C>
C> @authors J. Woollen J. Ator @date 1995-06-28

      RECURSIVE SUBROUTINE READERME(MESG,LUNIT,SUBSET,JDATE,IRET)

      USE MODV_MXMSGL
      USE MODV_IM8B

      USE MODA_SC3BFR
      USE MODA_IDRDM
      USE MODA_BITBUF

      COMMON /HRDWRD/ NBYTW,NBITW,IORD(8)
      COMMON /QUIET/  IPRT

      CHARACTER*128 BORT_STR,ERRSTR
      CHARACTER*8 SUBSET,SEC0
      CHARACTER*1 CEC0(8)

      DIMENSION   MESG(*),IEC0(2)

      LOGICAL ENDTBL

      EQUIVALENCE (SEC0,IEC0,CEC0)

C-----------------------------------------------------------------------
C-----------------------------------------------------------------------

C  CHECK FOR I8 INTEGERS
C  ---------------------

      IF(IM8B) THEN
         IM8B=.FALSE.

         CALL X84(LUNIT,MY_LUNIT,1)
         CALL READERME(MESG,MY_LUNIT,SUBSET,JDATE,IRET)
         CALL X48(JDATE,JDATE,1)
         CALL X48(IRET,IRET,1)

         IM8B=.TRUE.
         RETURN
      ENDIF

      IRET = 0

C  CHECK THE FILE STATUS
C  ---------------------

      CALL STATUS(LUNIT,LUN,IL,IM)
      IF(IL.EQ.0) GOTO 900
      IF(IL.GT.0) GOTO 901
      CALL WTSTAT(LUNIT,LUN,IL, 1)

C  COPY THE INPUT MESSAGE INTO THE INTERNAL MESSAGE BUFFER
C  -------------------------------------------------------

      IEC0(1) = MESG(1)
      IEC0(2) = MESG(2)
      LNMSG = LMSG(SEC0)
      IF(LNMSG*NBYTW.GT.MXMSGL) GOTO 902
      DO I=1,LNMSG
        MBAY(I,LUN) = MESG(I)
      ENDDO

C     Confirm that the first 4 bytes of SEC0 contain 'BUFR' encoded in
C     CCITT IA5 (i.e. ASCII).

      IF(ICHKSTR('BUFR',CEC0,4).NE.0) GOTO 903

C  PARSE THE MESSAGE SECTION CONTENTS
C  ----------------------------------

      IF(ISC3(LUN).NE.0) CALL READS3(LUN)

      CALL CKTABA(LUN,SUBSET,JDATE,IRET)

      IF(ISC3(LUN).NE.0) RETURN

C  CHECK FOR A DX DICTIONARY MESSAGE
C  ---------------------------------

C     A new DX dictionary table can be passed in as a consecutive set of
C     DX dictionary messages.  Each message should be passed in one at a
C     time, via input argument MESG during consecutive calls to this
C     subroutine, and will be processed as a single dictionary table up
C     until the next message is passed in which either contains no data
C     subsets or else is a non-DX dictionary message.

      ENDTBL = .FALSE.

      IF(IDXMSG(MBAY(1,LUN)).EQ.1) THEN

C       This is a DX dictionary message that was generated by the
C       BUFRLIB archive library software.

        IF(IUPBS3(MBAY(1,LUN),'NSUB').EQ.0) THEN

C         But it doesn't contain any actual dictionary information, so
C         assume we've reached the end of the dictionary table.

          IF(IDRDM(LUN).GT.0) THEN
            ENDTBL = .TRUE.
          ENDIF
        ELSE
          IF(IDRDM(LUN).EQ.0) THEN

C           This is the first DX dictionary message that is part of a
C           new dictionary table.

            CALL DXINIT(LUN,0)
          ENDIF
          IDRDM(LUN) = IDRDM(LUN) + 1
          CALL STBFDX(LUN,MBAY(1,LUN))
        ENDIF
      ELSE IF(IDRDM(LUN).GT.0) THEN

C       This is the first non-DX dictionary message received following a
C       string of DX dictionary messages, so assume we've reached the
C       end of the dictionary table.

        ENDTBL = .TRUE.
      ENDIF

      IF(ENDTBL) THEN
        IF ( IPRT .GE. 2 ) THEN
        CALL ERRWRT('+++++++++++++++++++++++++++++++++++++++++++++++++')
        WRITE ( UNIT=ERRSTR, FMT='(A,I3,A)' )
     .    'BUFRLIB: READERME - STORED NEW DX TABLE CONSISTING OF (',
     .    IDRDM(LUN), ') MESSAGES;'
        CALL ERRWRT(ERRSTR)
        ERRSTR = 'WILL APPLY THIS TABLE TO ALL SUBSEQUENT DATA '//
     .    'MESSAGES UNTIL NEXT DX TABLE IS PASSED IN'
        CALL ERRWRT(ERRSTR)
        CALL ERRWRT('+++++++++++++++++++++++++++++++++++++++++++++++++')
        CALL ERRWRT(' ')
        ENDIF
        IDRDM(LUN) = 0
        CALL MAKESTAB
      ENDIF

C  EXITS
C  -----

      RETURN
900   CALL BORT('BUFRLIB: READERME - INPUT BUFR FILE IS CLOSED, IT '//
     . 'MUST BE OPEN FOR INPUT')
901   CALL BORT('BUFRLIB: READERME - INPUT BUFR FILE IS OPEN FOR '//
     . 'OUTPUT, IT MUST BE OPEN FOR INPUT')
902   WRITE(BORT_STR,'("BUFRLIB: READERME - INPUT BUFR MESSAGE LENGTH",
     . 1X,I6," BYTES) IS LARGER THAN LIMIT OF ",I6," BYTES")')
     . LNMSG*NBYTW,MXMSGL
      CALL BORT(BORT_STR)
903   CALL BORT('BUFRLIB: READERME - FIRST 4 BYTES READ FROM RECORD'//
     . ' NOT "BUFR", DOES NOT CONTAIN BUFR DATA')
      END
